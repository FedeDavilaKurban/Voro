#!/usr/bin/env python

import sys
import argparse
import os
import numpy as np 
import time

from galaxy_bao_fitter import *
from cf_tools import Multipoles

parser = argparse.ArgumentParser()

parser.add_argument('-i', '--input', help='Input correlation function')
parser.add_argument('-c', '--cov', help='Input covariance matrix')
parser.add_argument('-o', '--output', help='Root for outputs')
parser.add_argument('--nmocks', 
                    help='Number of mocks used to compute covariance matrix',
                    type=int)
parser.add_argument('--z', help='Redshift of power spectrum', \
                    type=float, default=0.71)
parser.add_argument('--norm_pk', 
                    help='Do NOT normalize the power spectrum to integral one',
                    action='store_true', default=False)
parser.add_argument('--non_linear_pk', 
                    help='Compute non-linear P(k) using CAMB Halofit', 
                    action='store_true', default=False)
parser.add_argument('--cosmology',
                    help='Name of cosmological parameters. Examples: '+
                    'challenge, qpm, planck, outerim, EZmock', default='challenge')
parser.add_argument('--rmin', help='Minimum separation', 
                    type=float, default=30.)
parser.add_argument('--rmax', help='Maximum separation', 
                    type=float, default=180.)
parser.add_argument('--fit_broadband', help='Use broadband', \
                    action='store_true', default=False)
parser.add_argument('--bb_min', help='Minimum exponent for broadband', \
                    type=int, default=-2)
parser.add_argument('--bb_max', help='Maximum exponent for broadband', \
                    type=int, default=0)
parser.add_argument('--fit_nopeak', help='Perform a fit without bao peak', \
                    action='store_true', default=False)
parser.add_argument('--fit_quad', help='Use quadrupole', \
                    action='store_true', default=False)
parser.add_argument('--fit_hexa', help='Use hexadecapole', \
                    action='store_true', default=False)
parser.add_argument('--fit_iso', help='Perform isotropic fit', \
                    action='store_true', default=False)
parser.add_argument('--fit_beta', help='Perform fit of beta, not f=growth rate', \
                    action='store_true', default=False)
parser.add_argument('--fit_cross', help='Perform cross-correlation fit with two bias values', 
                    action='store_true', default=False)
parser.add_argument('--fit_amp', help=r'Perform fit on overall amplitude of the model (e.g. \bar{THI})', 
                    action='store_true', default=False)
parser.add_argument('--fit_beam', help='Perform fit of parallel damping (beam effect)', \
                    action='store_true', default=False)
parser.add_argument('--plotit', help='Plot best-fit model', \
                    action='store_true', default=False)
parser.add_argument('--save_plot', help='Saves plot into this file (will fill filename with fit parameters)',
                    type=str, default=None)
parser.add_argument('--scale_r_plot', help='Plot correlatons times r^(scale_r_plot)', 
                    type=int, default=2)
parser.add_argument('--cute', help='Input is in CUTE format', \
                    action='store_true', default=False)
parser.add_argument('--rebin_r', \
                    help='Rebin input correlation function (needs CUTE type input)',
                     type=int)
parser.add_argument('--shift_r', \
                    help='Shifts input correlation function (needs CUTE type input)', \
                    type=int, default=0)
parser.add_argument('--fixes', nargs='+', \
                    help='Set fixed parameters. Usage: parameter1 value1 parameter2 value2')
parser.add_argument('--limits', nargs='+', \
                    help='Set limits of  parameters. Usage: parameter1 lower1 upper1 parameter2 lower2 upper2 ...')
parser.add_argument('--priors', nargs='+', \
    help='Set priors on parameters. Usage: parameter1 mean1 sigma1 parameter2 mean2 sigma2')
parser.add_argument('--minos', nargs='+', \
    help='Compute precise error bars. Usage: parameter1 parameter2 ...')
parser.add_argument('--scan', nargs='+', 
    help='Compute chi2 surface for a list of parameters. '+
         'Usage: parameter1 lower1 upper1 nbins1 ...')
parser.add_argument('--scan2d', nargs='+', 
    help='Compute 2D chi2 surface for a list of parameters. '+
         'Usage: parameter1 lower1 upper1 nbins1 '+
                'parameter2 lower2 upper2 nbins2 ...')
parser.add_argument('--scan_nopeak', nargs='+', 
                    help='Compute chi2 surface for a list of parameters '+
                         'for a model without BAO peak.'+
                         ' Usage: parameter1 lower1 upper1 nbins1 ...')

parser.add_argument('--scale_cov', type=float, default=1.0, \
                    help='Scale factor for the covariance matrix')

args = parser.parse_args()

argnames = np.sort(np.array([arg for arg in args.__dict__]))
for arg in argnames:
    print(arg, ':', args.__dict__[arg])



##-- Read input multipoles 
m = Multipoles(args.input, cute=args.cute, rebin_r=args.rebin_r, shift_r=args.shift_r)
if not args.fit_quad:
    m.quad= None
if not args.fit_hexa:
    m.hexa = None
#-- Read covariance matrix
m.read_cov(args.cov)
m.coss *= args.scale_cov


#-- Define output name
output = args.output+\
        '-rmin%.1f-rmax%.1f'%(args.rmin, args.rmax)+\
        '-bb'*(args.fit_broadband)+ \
        '-quad'*(args.fit_quad)+\
        '-hexa'*(args.fit_hexa)+\
        '-iso'*(args.fit_iso)
output_base = os.path.basename(output)


#-- Define fixed parameters, priors and limits
fixes=args.fixes
if fixes:
    fixes_dict = {}
    for i in range(0, len(fixes), 2):
        fixes_dict[fixes[i]] = float(fixes[i+1])
    fixes=fixes_dict
else:
    fixes={}

priors=args.priors
if priors:
    priors_dict = {}
    for i in range(0, len(priors), 3):
        priors_dict[priors[i]] = [float(priors[i+1]), float(priors[i+2])]
    priors = priors_dict
else:
    priors={}

limits=args.limits
if limits:
    limits_dict = {}
    for i in range(0, len(limits), 3):
        limits_dict[limits[i]] = [float(limits[i+1]), float(limits[i+2])]
    limits = limits_dict
else:
    limits={}




#-- Define data, cutting over rmin,rmax 
data = Data(m.r, m.mono, m.coss, 
            quad=m.quad, hexa=m.hexa, 
            nmocks=args.nmocks, rmax=args.rmax, rmin=args.rmin)



#-- Initiate model with BAO peak
model = Model(fit_broadband=args.fit_broadband, 
              fit_quad=args.fit_quad, 
              fit_hexa=args.fit_hexa,
              name=args.cosmology, 
              norm_pk=args.norm_pk, 
              non_linear=args.non_linear_pk, 
              z=args.z, fit_iso=args.fit_iso, no_peak=0, 
              fit_cross=args.fit_cross, 
              fit_beam=args.fit_beam,
              fit_amp=args.fit_amp,
              fit_beta=args.fit_beta,
              bb_min=args.bb_min, bb_max=args.bb_max)

#-- Perform fit and export
sec0 = time.time()
chi2 = Chi2(data=data, model=model)
chi2.fit(fixes=fixes, priors=priors, limits=limits) 
chi2.export(output+'.pars')
sec1 = time.time()
tmin = (sec1-sec0)/60
print(f'Time elapsed during fit: {tmin:.2f} minutes')


#-- Initiate and perform fit without BAO peak
if args.fit_nopeak:
    sec1 = time.time()
    model_nopeak = Model(fit_broadband=args.fit_broadband, 
                         fit_quad=args.fit_quad,
                         fit_hexa=args.fit_hexa,
                         name=args.cosmology, norm_pk=args.norm_pk, 
                         non_linear=args.non_linear_pk, 
                         z=args.z, fit_iso=args.fit_iso, fit_beta=args.fit_beta, no_peak=1)  
    chi2_nopeak = Chi2(data=data, model=model_nopeak)
    chi2_nopeak.fit(fixes=fixes, priors=priors, limits=limits)
    chi2_nopeak.export(output+'-nopeak.pars')
    sec2 = time.time()
    tmin = (sec2-sec1)/60
    print(f'Time elapsed during fit of no peak: {tmin:.2f} minutes')

#-- Get assymetric error bars
if args.minos:
    sec2 = time.time()
    for par in args.minos:
        print('Performing minos for', par)
        minos = chi2.mig.minos(var=par)
        fout = open(output+'.%s.minos'%par, 'w')
        val = minos[par]['min']
        low = minos[par]['lower']
        upp = minos[par]['upper']
        err = 0.5*(-low+upp)
        print(f'{par} = {val:.4f} +/- {err:.4f}') 
        print(par, val, low, upp, minos[par]['is_valid'], file=fout)
        fout.close()

    sec3 = time.time()
    tmin = (sec3-sec2)/60
    print(f'Time elapsed during minos: {tmin:.2f} minutes')

#-- Perform one dimensional scans of chi2
if args.scan:
    sec3 = time.time()
    for i in range(0, len(args.scan), 4):
        par = args.scan[i]
        low = float(args.scan[i+1])
        upp = float(args.scan[i+2])
        nbin =  int(args.scan[i+3])
        par_scan, chi2_scan = \
            chi2.scan(par_name=par, par_nsteps=nbin, par_min=low, par_max=upp)

        #-- chi2 scans
        fout = open(output+'.%s.scan'%par, 'w')
        print(chi2.best_pars[par], chi2.chi2min, file=fout)
        for i in range(par_scan.size):
            print( par_scan[i], chi2_scan[i], file=fout)
        fout.close()
        print('chi2 scan exported to:', output+'.%s.scan'%par)

    sec4 = time.time()
    tmin = (sec4-sec3)/60
    print(f'Time elapsed during scan1d: {tmin:.2f} minutes')


#-- Perform one dimensional scans of chi2 for no peak model
if args.scan_nopeak:
    for i in range(0, len(args.scan_nopeak), 4):
        par = args.scan_nopeak[i]
        low = float(args.scan_nopeak[i+1])
        upp = float(args.scan_nopeak[i+2])
        nbin =  int(args.scan_nopeak[i+3])
        par_scan_nopeak, chi2_scan_nopeak = \
            chi2_nopeak.scan(par_name=par, par_nsteps=nbin, par_min=low, par_max=upp)

        #-- chi2 scans
        fout = open(output+'-nopeak.%s.scan'%par, 'w')
        print(chi2_nopeak.best_pars[par], chi2_nopeak.chi2min, file=fout)
        for i in range(par_scan_nopeak.size):
            print(par_scan_nopeak[i], chi2_scan_nopeak[i], file=fout)
        fout.close()


#-- Perform two dimensional scans of chi2
if args.scan2d:
    sec4 = time.time()
    for i in range(0, len(args.scan2d), 8):
        par_names = [args.scan2d[i], args.scan2d[i+4]]
        low = [float(args.scan2d[i+1]), float(args.scan2d[i+5])]
        upp = [float(args.scan2d[i+2]), float(args.scan2d[i+6])]
        nbin =  [int(args.scan2d[i+3]), int(args.scan2d[i+7])]
        par_scan0, par_scan1, chi2_scan = \
            chi2.scan_2d(par_names=par_names, par_nsteps=nbin, par_min=low, par_max=upp)

        filename = output+'.%s.%s.scan2d'%(par_names[0], par_names[1])
        fout = open(filename, 'w')
        print( chi2.best_pars[par_names[0]], \
               chi2.best_pars[par_names[1]], \
               chi2.chi2min, file=fout)
        for i in range(par_scan0.size):
            for j in range(par_scan1.size):
                print(par_scan0[i], par_scan1[j], chi2_scan[i, j], file=fout)
        fout.close()
        print('chi2 scan exported to:', filename)

    sec5 = time.time()
    tmin = (sec5-sec4)/60
    print(f'Time elapsed during scan2d: {tmin:.2f} minutes')


if args.plotit:
    fig = chi2.plot_bestfit(label=r'$\chi^2 = %.2f$'%chi2.chi2min, scale_r=args.scale_r_plot)
    if args.fit_nopeak:
        fig = chi2_nopeak.plot_bestfit(fig=fig, model_only=1, scale_r=args.scale_r_plot, \
                label=r'$\chi^2_{\rm no \ peak} = %.2f$'%chi2_nopeak.chi2min)
    plt.legend(loc=0)
    plt.tight_layout()
    if args.save_plot:
        plt.savefig(args.save_plot, bbox_inches='tight')
    plt.show()








